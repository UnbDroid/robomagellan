# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from raspberry_msgs/GPS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GPS(genpy.Message):
  _md5sum = "ce40b63f049129349999b8d09618a193"
  _type = "raspberry_msgs/GPS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool gpsFixOk
int64 gpsFix

float64 iTow
float64 ecefX
float64 ecefY
float64 ecefZ
float64 pAcc

float64 lat
float64 lng
float64 hAcc
float64 height
float64 vAcc

float64 velN
float64 velE
float64 velD
float64 speed3D
float64 speed2D
float64 heading
float64 cAcc
float64 sAcc

int64 tempo
bool newPos"""
  __slots__ = ['gpsFixOk','gpsFix','iTow','ecefX','ecefY','ecefZ','pAcc','lat','lng','hAcc','height','vAcc','velN','velE','velD','speed3D','speed2D','heading','cAcc','sAcc','tempo','newPos']
  _slot_types = ['bool','int64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gpsFixOk,gpsFix,iTow,ecefX,ecefY,ecefZ,pAcc,lat,lng,hAcc,height,vAcc,velN,velE,velD,speed3D,speed2D,heading,cAcc,sAcc,tempo,newPos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gpsFixOk is None:
        self.gpsFixOk = False
      if self.gpsFix is None:
        self.gpsFix = 0
      if self.iTow is None:
        self.iTow = 0.
      if self.ecefX is None:
        self.ecefX = 0.
      if self.ecefY is None:
        self.ecefY = 0.
      if self.ecefZ is None:
        self.ecefZ = 0.
      if self.pAcc is None:
        self.pAcc = 0.
      if self.lat is None:
        self.lat = 0.
      if self.lng is None:
        self.lng = 0.
      if self.hAcc is None:
        self.hAcc = 0.
      if self.height is None:
        self.height = 0.
      if self.vAcc is None:
        self.vAcc = 0.
      if self.velN is None:
        self.velN = 0.
      if self.velE is None:
        self.velE = 0.
      if self.velD is None:
        self.velD = 0.
      if self.speed3D is None:
        self.speed3D = 0.
      if self.speed2D is None:
        self.speed2D = 0.
      if self.heading is None:
        self.heading = 0.
      if self.cAcc is None:
        self.cAcc = 0.
      if self.sAcc is None:
        self.sAcc = 0.
      if self.tempo is None:
        self.tempo = 0
      if self.newPos is None:
        self.newPos = False
    else:
      self.gpsFixOk = False
      self.gpsFix = 0
      self.iTow = 0.
      self.ecefX = 0.
      self.ecefY = 0.
      self.ecefZ = 0.
      self.pAcc = 0.
      self.lat = 0.
      self.lng = 0.
      self.hAcc = 0.
      self.height = 0.
      self.vAcc = 0.
      self.velN = 0.
      self.velE = 0.
      self.velD = 0.
      self.speed3D = 0.
      self.speed2D = 0.
      self.heading = 0.
      self.cAcc = 0.
      self.sAcc = 0.
      self.tempo = 0
      self.newPos = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Bq18dqB.pack(_x.gpsFixOk, _x.gpsFix, _x.iTow, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.lat, _x.lng, _x.hAcc, _x.height, _x.vAcc, _x.velN, _x.velE, _x.velD, _x.speed3D, _x.speed2D, _x.heading, _x.cAcc, _x.sAcc, _x.tempo, _x.newPos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 162
      (_x.gpsFixOk, _x.gpsFix, _x.iTow, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.lat, _x.lng, _x.hAcc, _x.height, _x.vAcc, _x.velN, _x.velE, _x.velD, _x.speed3D, _x.speed2D, _x.heading, _x.cAcc, _x.sAcc, _x.tempo, _x.newPos,) = _struct_Bq18dqB.unpack(str[start:end])
      self.gpsFixOk = bool(self.gpsFixOk)
      self.newPos = bool(self.newPos)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Bq18dqB.pack(_x.gpsFixOk, _x.gpsFix, _x.iTow, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.lat, _x.lng, _x.hAcc, _x.height, _x.vAcc, _x.velN, _x.velE, _x.velD, _x.speed3D, _x.speed2D, _x.heading, _x.cAcc, _x.sAcc, _x.tempo, _x.newPos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 162
      (_x.gpsFixOk, _x.gpsFix, _x.iTow, _x.ecefX, _x.ecefY, _x.ecefZ, _x.pAcc, _x.lat, _x.lng, _x.hAcc, _x.height, _x.vAcc, _x.velN, _x.velE, _x.velD, _x.speed3D, _x.speed2D, _x.heading, _x.cAcc, _x.sAcc, _x.tempo, _x.newPos,) = _struct_Bq18dqB.unpack(str[start:end])
      self.gpsFixOk = bool(self.gpsFixOk)
      self.newPos = bool(self.newPos)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bq18dqB = struct.Struct("<Bq18dqB")
